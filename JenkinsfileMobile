def config = [
    develop: [
        appContext: "develop"
    ],
    master: [
        appContext: "master"
    ]
]

pipeline {

  agent {
    label 'kabisas-mac-mini'
  }

  environment {
    PATH = '/usr/local/bin:/usr/local/sbin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/rvm/bin/:/Users/jenkins/Library/Android/sdk/platform-tools:/Users/jenkins/Library/Android/sdk/tools:/Users/jenkins/Library/Android/sdk/build-tools/26.0.1:/Users/jenkins/Library/Android/sdk/platform-tools'
    LC_ALL = 'en_US.UTF-8'
    FASTLANE_SKIP_UPDATE_CHECK = true
    MATCH_PASSWORD = credentials('MATCH_PASSWORD')
    FL_HOCKEY_API_TOKEN = credentials('HOCKEY_API_TOKEN')
    FL_HOCKEY_PUBLIC_IDENTIFIER_ANDROID = credentials('FL_HOCKEY_PUBLIC_IDENTIFIER_ANDROID')
    FL_HOCKEY_PUBLIC_IDENTIFIER_IOS = credentials('FL_HOCKEY_PUBLIC_IDENTIFIER_IOS')
    FASTLANE_USER = credentials('FASTLANE_USER')
    FASTLANE_PASSWORD = credentials('FASTLANE_PASSWORD')

    APP_CONTEXT = credentials("${config.get(env.BRANCH_NAME, config.develop).appContext}")

//    ONLY REQUIRED FOR PRODUCTION
//    COMMENT LINES BELOW IF ONLY USING HOCKEYAPP
    //FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT = 200
    //ANDROID_JSON_KEY_FILE = credentials('ANDROID_JSON_KEY_FILE')
    //ANDROID_KEY_STORE = credentials('ANDROID_KEY_STORE')
    ANDROID_KEY_STORE_PASSWORD = credentials('ANDROID_KEY_STORE_PASSWORD')
    MACMINI_CODESIGN_KEYCHAIN_PASSWORD = credentials('MACMINI_CODESIGN_KEYCHAIN_PASSWORD')
    MACMINI_LOGIN_KEYCHAIN_PASSWORD = credentials('MACMINI_LOGIN_KEYCHAIN_PASSWORD')
  }

  stages {
    stage("Prepare (installs)") {
      when {
        anyOf {
          branch 'master';branch 'develop';branch 'appstore';
        }
      }
      steps {
        script {
          commitMessage = sh(returnStdout: true, script: 'echo "$(git log --format=%B -n 1)"').trim()
        }
        sh '''#!/bin/bash -l
            rm -r cordova/ && git checkout cordova
            echo `pwd`
                rvm install $(cat .ruby-version)
                rvm use $(cat .ruby-version)
                ruby -v

                gem install -N bundler

                bundle install
                yarn install
                cd cordova && npm install
                cd ..
                env
        '''
      }
    }

    stage("Check Store version") {
      when {
        allOf {
          anyOf {
            branch 'master';branch 'develop';branch 'appstore';

          }
          expression {
            commitMessage.contains('DEPLOY_IOS_STORE');
          }
        }
      }

      steps {

        sh '''#!/bin/bash -l

          bundle exec fastlane check_version

        '''
      }
    }

    stage("Unlock keychain") {
      when {
        allOf {
          anyOf {
            branch 'master';branch 'develop';branch 'appstore';
          }
          expression {
            commitMessage.contains('DEPLOY_HOCKEY') || commitMessage.contains('DEPLOY_IOS_STORE')
          }
        }
      }

      steps {
        sh '''#!/bin/bash -l
          security -v list-keychains -d system -s ~/Library/Keychains/codesign.keychain >/dev/null
          security -v unlock-keychain -p $MACMINI_CODESIGN_KEYCHAIN_PASSWORD ~/Library/Keychains/codesign.keychain >/dev/null
          security set-keychain-settings -t 3600 -l ~/Library/Keychains/codesign.keychain >/dev/null
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $MACMINI_LOGIN_KEYCHAIN_PASSWORD /Users/jenkins/Library/Keychains/login.keychain-db >/dev/null
        '''
      }
    }

    stage("Prepare Fastlane") {
      when {
        allOf {
          anyOf {
            branch 'master';branch 'develop';branch 'appstore';
          }
          expression {
            commitMessage.contains('DEPLOY_HOCKEY') || commitMessage.contains('DEPLOY_STORE')
          }
        }
      }

      steps {
        script {
          currUser = sh(returnStdout: true, script: 'whoami').trim()
          env.ANDROID_SDK_ROOT = "/Users/${currUser}/Library/Android/sdk/"
          env.ANDROID_HOME = "/Users/${currUser}/Library/Android/sdk/"
        }


        sh '''#!/bin/bash -l
          mkdir -p fastlane/vault/

          cat $ANDROID_JSON_KEY_FILE > fastlane/vault/ANDROID_JSON_KEY_FILE.json
          cat $ANDROID_KEY_STORE > fastlane/vault/android.jks

          eval $(ssh-agent -s)
          ssh-add /Users/jenkins/.ssh/id_rsa
        '''

      }
    }

    stage("Deploy iOS HockeyApp") {
      when {
        allOf {
          anyOf {
            branch 'master';branch 'develop';branch 'appstore';

          }
          expression {
            commitMessage.contains('DEPLOY_HOCKEY');
          }
        }
      }

      environment {
        APP_ENV =  "development"
      }

      steps {
        script {
          env.APP_ENV = "development"
        }

        sh '''#!/bin/bash -l

          bundle exec fastlane register_ios_devices
          bundle exec fastlane ios_deploy_hockey

        '''
      }
    }

    stage("Deploy Android HockeyApp") {
      when {
        allOf {
          anyOf {
            branch 'master';branch 'develop';branch 'appstore';

          }
          expression {
            commitMessage.contains('DEPLOY_HOCKEY');
          }
        }
      }

      environment {
        APP_ENV =  "development"
      }

      steps {
        script {
          env.APP_ENV = "development"
        }

        sh '''#!/bin/bash -l
          bundle exec fastlane android_deploy_hockey

        '''
      }
    }

    stage("Deploy PlayStore") {
      when {
        allOf {
          anyOf {
            branch 'master';branch 'develop';branch 'appstore';

          }
          expression {
            commitMessage.contains('DEPLOY_STORE');
          }
        }
      }

      environment {
        APP_ENV =  "production"
      }

      steps {
        script {
          env.APP_ENV = "production"
        }

        sh '''#!/bin/bash -l

          bundle exec fastlane android_deploy_store

        '''
      }
    }

    stage("Deploy AppStore") {
      when {
        allOf {
          anyOf {
            branch 'master';branch 'develop';branch 'appstore';

          }
          expression {
            commitMessage.contains('DEPLOY_IOS_STORE');
          }
        }
      }

      environment {
        APP_ENV =  "production"
      }

      steps {
        script {
          env.APP_ENV = "production"
        }

        sh '''#!/bin/bash -l

          bundle exec fastlane ios_deploy_store

        '''
      }
    }

  }

  post {
    always {
      echo 'Cleaning up....'
      sh  '''#!/bin/bash -l

        rm -Rf fastlane/vault/

      '''
    }
  }
}
